{
  "openapi": "3.0.0",
  "info": {
    "title": "Cake Store API",
    "version": "1.0.0",
    "description": "API documentation for the Cake Store application, managing menus, orders, customers, employees, reservations, inventories, tables, and payments."
  },
  "servers": [
    {
      "url": "localhost",
      "description": "Local development server"
    },
    {
      "url": "127.0.0.1",
      "description": "Local development server"
    },
    {
      "url": "cakeville.dewanto.dev",
      "description": "Production server"
    },
    {
      "url": "68d9-2a09-bac5-3a09-25d7-00-3c5-35.ngrok-free.app",
      "description": "Ngrok tunnel for local development"
    }
  ],
  "tags": [
    {
      "name": "Menus",
      "description": "Operations related to cake menus."
    },
    {
      "name": "Customers",
      "description": "Operations related to customer accounts."
    },
    {
      "name": "Orders",
      "description": "Operations related to customer orders."
    },
    {
      "name": "Carts",
      "description": "Operations related to customer shopping carts."
    },
    {
      "name": "Wishlists",
      "description": "Operations related to customer wishlists."
    },
    {
      "name": "Employees",
      "description": "Operations related to employee management."
    },
    {
      "name": "Reservations",
      "description": "Operations related to table reservations."
    },
    {
      "name": "Inventories",
      "description": "Operations related to inventory management."
    },
    {
      "name": "Tables",
      "description": "Operations related to restaurant tables."
    },
    {
      "name": "Payments",
      "description": "Operations related to payment processing."
    },
    {
      "name": "Health Check",
      "description": "API health check endpoint."
    }
  ],
  "paths": {
    "/menus": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Get all menus",
        "description": "Retrieves a list of all available cake menus, with optional filtering by title and category, and pagination.",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "required": false,
            "description": "Filter menus by title (case-insensitive partial match).",
            "example": "red",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination.",
            "example": 1,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "description": "Filter menus by category.",
            "example": "wedding_cake",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page for pagination.",
            "example": 10,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved menus.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:11:19 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "502"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenusResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a new menu item",
        "description": "Adds a new cake menu item to the store.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Menu item successfully created.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:14:35 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "226"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleMenuResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          }
        }
      }
    },
    "/menus/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the menu item to retrieve, update, or delete.",
          "schema": {
            "type": "integer"
          },
          "example": 1
        }
      ],
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Get menu by ID",
        "description": "Retrieves a single cake menu item by its unique ID.",
        "responses": {
          "200": {
            "description": "Menu item successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:13:23 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "409"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleMenuResponse"
                }
              }
            }
          },
          "404": {
            "description": "Menu item not found."
          }
        }
      },
      "put": {
        "tags": [
          "Menus"
        ],
        "summary": "Update a menu item by ID",
        "description": "Updates an existing cake menu item by its unique ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu item successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:27:25 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "212"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleMenuResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "Menu item not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Menus"
        ],
        "summary": "Delete a menu item by ID",
        "description": "Deletes a cake menu item by its unique ID.",
        "responses": {
          "200": {
            "description": "Menu item successfully deleted.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 17 Apr 2025 23:14:52 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "21"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Menu item not found."
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Register a new customer",
        "description": "Registers a new customer account with name, email, password, and address.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer registered successfully."
          },
          "400": {
            "description": "Invalid input or email already registered."
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Log in a customer",
        "description": "Authenticates a customer and returns an authentication token upon successful login.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer logged in successfully.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:10:36 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "225"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string",
                      "description": "Authentication token."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          }
        }
      }
    },
    "/customers/me": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get current customer's profile",
        "description": "Retrieves the profile information of the currently authenticated customer.",
        "responses": {
          "200": {
            "description": "Customer profile successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 14:47:13 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "127"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Authorize customer",
        "description": "Checks if the provided authentication token is valid.",
        "responses": {
          "200": {
            "description": "Authorization successful.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:19:30 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "37"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/customers/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the customer to update.",
          "schema": {
            "type": "integer"
          },
          "example": 5
        }
      ],
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update customer profile by ID",
        "description": "Updates the profile information of a customer by their unique ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer profile successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 14:49:39 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "42"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "404": {
            "description": "Customer not found."
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "description": "Creates a new order with a list of menu items and a delivery address.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order successfully created.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:34:38 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "203"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders (Admin/Employee)",
        "description": "Retrieves a list of all orders. This endpoint is typically for internal use (admin/employees).",
        "responses": {
          "200": {
            "description": "Successfully retrieved orders.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Fri, 13 Jun 2025 10:09:52 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "2023"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      }
    },
    "/orders/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the order to retrieve.",
          "schema": {
            "type": "integer"
          },
          "example": 28
        }
      ],
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order by ID",
        "description": "Retrieves a single order by its unique ID.",
        "responses": {
          "200": {
            "description": "Order successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Fri, 13 Jun 2025 10:12:41 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "743"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOrderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "404": {
            "description": "Order not found."
          }
        }
      }
    },
    "/orders/customers": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders for the current customer",
        "description": "Retrieves a list of all orders made by the currently authenticated customer.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination.",
            "example": 1,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved customer orders.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Mon, 21 Apr 2025 14:00:50 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "4574"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrdersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/orders/{id}/food-status": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the order to update food status.",
          "schema": {
            "type": "integer"
          },
          "example": 16
        }
      ],
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update food status of an order",
        "description": "Updates the food preparation status of a specific order. This endpoint is typically for kitchen staff.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFoodStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Food status updated successfully.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Fri, 13 Jun 2025 10:31:15 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "46"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or status transition."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions (e.g., not kitchen staff)."
          },
          "404": {
            "description": "Order not found."
          }
        }
      }
    },
    "/carts": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Add item to cart",
        "description": "Adds a specified quantity of a menu item to the current customer's shopping cart.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCartItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item successfully added to cart.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:33:04 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "39"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or menu item not found."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/carts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the cart item to remove.",
          "schema": {
            "type": "integer"
          },
          "example": 1
        }
      ],
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Remove item from cart",
        "description": "Removes a specific item from the current customer's shopping cart.",
        "responses": {
          "200": {
            "description": "Item successfully removed from cart.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Fri, 25 Apr 2025 16:45:29 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "39"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "404": {
            "description": "Cart item not found or does not belong to the current customer."
          }
        }
      }
    },
    "/carts/customer": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get customer's cart",
        "description": "Retrieves all items currently in the authenticated customer's shopping cart.",
        "responses": {
          "200": {
            "description": "Successfully retrieved customer's cart.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:38:05 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "585"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCartsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/wishlists": {
      "get": {
        "tags": [
          "Wishlists"
        ],
        "summary": "Get customer's wishlists",
        "description": "Retrieves all menu items in the authenticated customer's wishlist.",
        "responses": {
          "200": {
            "description": "Successfully retrieved customer's wishlists.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Fri, 25 Apr 2025 15:03:20 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "913"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/wishlists/{menu_id}": {
      "parameters": [
        {
          "name": "menu_id",
          "in": "path",
          "required": true,
          "description": "ID of the menu item to add to or remove from wishlist.",
          "schema": {
            "type": "integer"
          },
          "example": 3
        }
      ],
      "post": {
        "tags": [
          "Wishlists"
        ],
        "summary": "Add item to wishlist",
        "description": "Adds a menu item to the current customer's wishlist.",
        "responses": {
          "201": {
            "description": "Item successfully added to wishlist.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Sat, 14 Jun 2025 08:39:21 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "43"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Wishlist item already exists or invalid menu ID."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "404": {
            "description": "Menu item not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Wishlists"
        ],
        "summary": "Remove item from wishlist",
        "description": "Removes a specific menu item from the current customer's wishlist.",
        "responses": {
          "200": {
            "description": "Item successfully removed from wishlist."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "404": {
            "description": "Wishlist item not found or does not belong to the current customer."
          }
        }
      }
    },
    "/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get all employees",
        "description": "Retrieves a list of all employee accounts.",
        "responses": {
          "200": {
            "description": "Successfully retrieved employees.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Wed, 11 Jun 2025 07:36:53 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "199"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      }
    },
    "/employees/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the employee to retrieve, update, or delete.",
          "schema": {
            "type": "integer"
          },
          "example": 3
        }
      ],
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get employee by ID",
        "description": "Retrieves a single employee account by their unique ID.",
        "responses": {
          "200": {
            "description": "Employee successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Wed, 11 Jun 2025 07:49:09 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "120"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleEmployeeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Employee not found."
          }
        }
      },
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update an employee by ID",
        "description": "Updates an existing employee account by their unique ID.",
        "parameters": [
          {
            "name": "x-app-role",
            "in": "header",
            "required": false,
            "description": "Role of the application accessing the API (e.g., 'kitchen_staff').",
            "example": "kitchen_staff",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Wed, 11 Jun 2025 07:03:42 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "289"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Employee not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Delete an employee by ID",
        "description": "Deletes an employee account by their unique ID.",
        "responses": {
          "200": {
            "description": "Employee successfully deleted.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Wed, 11 Jun 2025 08:04:09 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "43"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Employee not found."
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get customer's reservations",
        "description": "Retrieves a list of all reservations made by the currently authenticated customer.",
        "responses": {
          "200": {
            "description": "Successfully retrieved customer reservations.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 14:06:37 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "812"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      },
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Create a new reservation",
        "description": "Creates a new table reservation for the current customer.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReservationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reservation successfully created.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:13:14 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "376"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or no available tables for the requested date/guest count."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          }
        }
      }
    },
    "/reservations/admin": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get all reservations (Admin)",
        "description": "Retrieves a list of all reservations in the system. This endpoint is for administrators.",
        "responses": {
          "200": {
            "description": "Successfully retrieved all reservations.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 14:00:54 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "812"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions (e.g., not an admin)."
          }
        }
      }
    },
    "/reservations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the reservation to retrieve, update, or delete.",
          "schema": {
            "type": "integer"
          },
          "example": 1
        }
      ],
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get reservation by ID",
        "description": "Retrieves a single reservation by its unique ID.",
        "responses": {
          "200": {
            "description": "Reservation successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:28:11 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "378"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleReservationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Reservation not found."
          }
        }
      },
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Update a reservation by ID",
        "description": "Updates an existing reservation by its unique ID. This can be used by customers to update their own reservations or by admin to change status.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reservation successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:31:33 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "376"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or table not available for the updated details."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions to update this reservation."
          },
          "404": {
            "description": "Reservation not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations"
        ],
        "summary": "Delete a reservation by ID",
        "description": "Deletes a reservation by its unique ID. This can be used by customers to cancel their own reservations or by admin.",
        "responses": {
          "200": {
            "description": "Reservation successfully deleted.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:32:47 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "46"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions to delete this reservation."
          },
          "404": {
            "description": "Reservation not found."
          }
        }
      }
    },
    "/inventories": {
      "get": {
        "tags": [
          "Inventories"
        ],
        "summary": "Get all inventories",
        "description": "Retrieves a list of all inventory items.",
        "responses": {
          "200": {
            "description": "Successfully retrieved inventories.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 07:00:56 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "2328"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      },
      "post": {
        "tags": [
          "Inventories"
        ],
        "summary": "Create a new inventory item",
        "description": "Adds a new inventory item to the system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory item successfully created.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 07:26:19 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "327"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      }
    },
    "/inventories/by-id/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the inventory item to retrieve.",
          "schema": {
            "type": "integer"
          },
          "example": 8
        }
      ],
      "get": {
        "tags": [
          "Inventories"
        ],
        "summary": "Get inventory item by ID",
        "description": "Retrieves a single inventory item by its unique ID.",
        "responses": {
          "200": {
            "description": "Inventory item successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:02:25 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "318"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleInventoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Inventory item not found."
          }
        }
      }
    },
    "/inventories/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the inventory item to update or delete.",
          "schema": {
            "type": "integer"
          },
          "example": 9
        }
      ],
      "put": {
        "tags": [
          "Inventories"
        ],
        "summary": "Update an inventory item by ID",
        "description": "Updates an existing inventory item by its unique ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory item successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 07:27:54 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "334"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Inventory item not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Inventories"
        ],
        "summary": "Delete an inventory item by ID",
        "description": "Deletes an inventory item by its unique ID.",
        "responses": {
          "200": {
            "description": "Inventory item successfully deleted.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 07:37:25 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "45"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Inventory item not found."
          }
        }
      }
    },
    "/inventories/low-stock": {
      "get": {
        "tags": [
          "Inventories"
        ],
        "summary": "Get low stock inventory items",
        "description": "Retrieves a list of inventory items that are below their reorder point.",
        "responses": {
          "200": {
            "description": "Successfully retrieved low stock items.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 08:02:46 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "68"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      }
    },
    "/tables": {
      "get": {
        "tags": [
          "Tables"
        ],
        "summary": "Get all tables",
        "description": "Retrieves a list of all restaurant tables.",
        "responses": {
          "200": {
            "description": "Successfully retrieved tables.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 12:15:57 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "3286"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TablesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      },
      "post": {
        "tags": [
          "Tables"
        ],
        "summary": "Create a new table",
        "description": "Adds a new table to the restaurant.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTableRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Table successfully created.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 12:24:37 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "204"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleTableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or table number already exists."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          }
        }
      }
    },
    "/tables/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the table to retrieve, update, or delete.",
          "schema": {
            "type": "integer"
          },
          "example": 1
        }
      ],
      "get": {
        "tags": [
          "Tables"
        ],
        "summary": "Get table by ID",
        "description": "Retrieves a single table by its unique ID.",
        "responses": {
          "200": {
            "description": "Table successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 12:16:39 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "204"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleTableResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "put": {
        "tags": [
          "Tables"
        ],
        "summary": "Update a table by ID",
        "description": "Updates an existing table's information by its unique ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 12:28:43 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "203"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleTableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or table number conflict."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Tables"
        ],
        "summary": "Delete a table by ID",
        "description": "Deletes a table by its unique ID.",
        "responses": {
          "200": {
            "description": "Table successfully deleted.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 12:33:17 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "40"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/tables/{id}/availability": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the table to update availability.",
          "schema": {
            "type": "integer"
          },
          "example": 6
        }
      ],
      "patch": {
        "tags": [
          "Tables"
        ],
        "summary": "Update table availability",
        "description": "Updates the availability status of a table.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTableAvailabilityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table availability successfully updated.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 12:31:24 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "53"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "403": {
            "description": "Forbidden: User does not have the necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/payments/{order_id}": {
      "parameters": [
        {
          "name": "order_id",
          "in": "path",
          "required": true,
          "description": "ID of the order to get payment URL for.",
          "schema": {
            "type": "integer"
          },
          "example": 10
        }
      ],
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment URL for an order",
        "description": "Retrieves the payment redirect URL for a pending order.",
        "responses": {
          "200": {
            "description": "Payment URL successfully retrieved.",
            "headers": {
              "Date": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "Thu, 12 Jun 2025 23:49:38 GMT"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "example": "136"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string",
                      "format": "uri",
                      "description": "The URL to redirect for payment."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication token missing or invalid."
          },
          "404": {
            "description": "Order not found or payment already processed."
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health Check"
        ],
        "summary": "Health check",
        "description": "Checks the health and availability of the API.",
        "responses": {
          "200": {
            "description": "API is healthy and running."
          }
        }
      }
    },
    "/payment/notification/": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payment webhook endpoint",
        "description": "Endpoint for receiving payment notifications from the payment gateway.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentNotificationWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment notification successfully processed."
          },
          "400": {
            "description": "Invalid webhook payload or signature."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the operation's outcome."
          }
        },
        "example": {
          "message": "Operation successful."
        }
      },
      "MenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the menu item."
          },
          "title": {
            "type": "string",
            "description": "Title of the cake."
          },
          "description": {
            "type": "string",
            "description": "Description of the cake."
          },
          "price": {
            "type": "integer",
            "description": "Price of the cake."
          },
          "category": {
            "type": "string",
            "description": "Category of the cake (e.g., 'wedding_cake', 'birthday_cake')."
          },
          "rating": {
            "type": "number",
            "format": "float",
            "description": "Rating of the cake.",
            "minimum": 0,
            "maximum": 5
          },
          "image": {
            "type": "string",
            "format": "uri",
            "description": "URL of the cake image."
          }
        },
        "example": {
          "id": 1,
          "title": "Red Velvet Cake",
          "description": "A delicious red velvet cake with cream cheese frosting.",
          "price": 250000,
          "category": "birthday_cake",
          "rating": 4.8,
          "image": "http://example.com/red_velvet.jpg"
        }
      },
      "MenusResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "SingleMenuResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/MenuItem"
          }
        }
      },
      "CreateMenuRequest": {
        "type": "object",
        "required": [
          "title",
          "description",
          "price",
          "category",
          "rating",
          "image"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the new cake."
          },
          "description": {
            "type": "string",
            "description": "Description of the new cake."
          },
          "price": {
            "type": "integer",
            "description": "Price of the new cake."
          },
          "category": {
            "type": "string",
            "description": "Category of the new cake."
          },
          "rating": {
            "type": "integer",
            "description": "Rating of the new cake (integer value).",
            "minimum": 0,
            "maximum": 5
          },
          "image": {
            "type": "string",
            "format": "uri",
            "description": "URL of the new cake image."
          }
        },
        "example": {
          "title": "Blueberry Cheesecake",
          "description": "A rich and creamy cheesecake with a blueberry topping.",
          "price": 180000,
          "category": "cheesecake",
          "rating": 5,
          "image": "http://example.com/blueberry_cheesecake.jpg"
        }
      },
      "UpdateMenuRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated title of the cake."
          },
          "description": {
            "type": "string",
            "description": "Updated description of the cake."
          },
          "price": {
            "type": "integer",
            "description": "Updated price of the cake."
          },
          "category": {
            "type": "string",
            "description": "Updated category of the cake."
          },
          "rating": {
            "type": "integer",
            "description": "Updated rating of the cake (integer value).",
            "minimum": 0,
            "maximum": 5
          },
          "image": {
            "type": "string",
            "format": "uri",
            "description": "Updated URL of the cake image."
          }
        },
        "example": {
          "title": "Updated Chocolate Delight",
          "price": 280000
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the customer."
          },
          "name": {
            "type": "string",
            "description": "Name of the customer."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the customer."
          },
          "address": {
            "type": "string",
            "description": "Delivery address of the customer."
          }
        },
        "example": {
          "id": 1,
          "name": "John Doe",
          "email": "john.doe@example.com",
          "address": "123 Main St, Anytown"
        }
      },
      "RegisterCustomerRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password",
          "address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the customer."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the customer account."
          },
          "password": {
            "type": "string",
            "description": "Password for the customer account."
          },
          "address": {
            "type": "string",
            "description": "Customer's primary address."
          }
        },
        "example": {
          "name": "Jane Smith",
          "email": "jane.smith@example.com",
          "password": "securepassword123",
          "address": "456 Oak Ave, Anytown"
        }
      },
      "LoginCustomerRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the customer."
          },
          "password": {
            "type": "string",
            "description": "Password of the customer."
          }
        },
        "example": {
          "email": "john.doe@example.com",
          "password": "password123"
        }
      },
      "CustomerProfileResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "UpdateCustomerRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the customer."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Updated email address of the customer."
          },
          "address": {
            "type": "string",
            "description": "Updated address of the customer."
          }
        },
        "example": {
          "name": "Johnny Doe",
          "address": "789 Pine Ln, Othertown"
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the order item."
          },
          "cake": {
            "$ref": "#/components/schemas/MenuItem"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the menu item in the order."
          },
          "price": {
            "type": "integer",
            "description": "Price of the single menu item at the time of order."
          }
        },
        "example": {
          "id": 1,
          "cake": {
            "id": 1,
            "title": "Red Velvet Cake",
            "description": "A delicious red velvet cake with cream cheese frosting.",
            "price": 250000,
            "category": "birthday_cake",
            "rating": 4.8,
            "image": "http://example.com/red_velvet.jpg"
          },
          "quantity": 2,
          "price": 250000
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the order."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "status": {
            "type": "string",
            "description": "Current status of the order (e.g., 'pending', 'completed', 'cancelled')."
          },
          "total_price": {
            "type": "integer",
            "description": "Total price of the order."
          },
          "delivery_address": {
            "type": "string",
            "description": "Delivery address for the order."
          },
          "food_status": {
            "type": "string",
            "description": "Current food preparation status (e.g., 'preparing', 'ready_for_delivery')."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the order was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the order was last updated."
          }
        },
        "example": {
          "id": 28,
          "customer": {
            "id": 1,
            "name": "John Doe",
            "email": "john.doe@example.com",
            "address": "123 Main St, Anytown"
          },
          "status": "pending",
          "total_price": 500000,
          "delivery_address": "123 Main St, Anytown",
          "food_status": "preparing",
          "items": [
            {
              "id": 1,
              "cake": {
                "id": 1,
                "title": "Red Velvet Cake",
                "description": "A delicious red velvet cake with cream cheese frosting.",
                "price": 250000,
                "category": "birthday_cake",
                "rating": 4.8,
                "image": "http://example.com/red_velvet.jpg"
              },
              "quantity": 2,
              "price": 250000
            }
          ],
          "created_at": "2025-06-13T10:12:00Z",
          "updated_at": "2025-06-13T10:12:41Z"
        }
      },
      "CreateOrderRequest": {
        "type": "object",
        "required": [
          "items",
          "delivery_address"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of menu items to include in the order.",
            "items": {
              "type": "object",
              "required": [
                "menu_id",
                "title",
                "quantity",
                "price"
              ],
              "properties": {
                "menu_id": {
                  "type": "integer",
                  "description": "ID of the menu item."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the menu item."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the menu item."
                },
                "price": {
                  "type": "integer",
                  "description": "Price of the menu item."
                }
              }
            }
          },
          "delivery_address": {
            "type": "string",
            "description": "Delivery address for the order."
          }
        },
        "example": {
          "items": [
            {
              "menu_id": 1,
              "title": "Red Velvet Cake",
              "quantity": 1,
              "price": 250000
            },
            {
              "menu_id": 3,
              "title": "Chocolate Fudge",
              "quantity": 2,
              "price": 150000
            }
          ],
          "delivery_address": "456 Elm Street, Apt 5B"
        }
      },
      "CreateOrderResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Payment token."
              },
              "redirect_url": {
                "type": "string",
                "format": "uri",
                "description": "URL to redirect for payment."
              }
            }
          }
        }
      },
      "OrdersResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "SingleOrderResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        }
      },
      "CustomerOrdersResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "customer": {
                  "$ref": "#/components/schemas/Customer"
                },
                "status": {
                  "type": "string"
                },
                "total_price": {
                  "type": "integer"
                },
                "delivery_address": {
                  "type": "string"
                },
                "items": {
                  "type": "array",
                  "items": {}
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "UpdateFoodStatusRequest": {
        "type": "object",
        "required": [
          "food_status"
        ],
        "properties": {
          "food_status": {
            "type": "string",
            "description": "The new food preparation status (e.g., 'preparing', 'ready_for_delivery', 'delivered')."
          }
        },
        "example": {
          "food_status": "ready_for_delivery"
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the cart item."
          },
          "customer_id": {
            "type": "integer",
            "description": "ID of the customer who owns the cart item."
          },
          "name": {
            "type": "string",
            "description": "Name of the menu item in the cart."
          },
          "menu_id": {
            "type": "integer",
            "description": "ID of the associated menu item."
          },
          "image": {
            "type": "string",
            "format": "uri",
            "description": "URL of the menu item image."
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the menu item in the cart."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of the menu item."
          },
          "subtotal": {
            "type": "integer",
            "description": "Subtotal for this cart item (quantity * price)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "customer_id": 1,
          "name": "Red Velvet Cake",
          "menu_id": 1,
          "image": "http://example.com/red_velvet.jpg",
          "quantity": 1,
          "price": 250000,
          "subtotal": 250000,
          "created_at": "2025-06-14T08:37:00Z",
          "updated_at": "2025-06-14T08:38:00Z"
        }
      },
      "AddCartItemRequest": {
        "type": "object",
        "required": [
          "menu_id",
          "quantity"
        ],
        "properties": {
          "menu_id": {
            "type": "integer",
            "description": "ID of the menu item to add to cart."
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the menu item to add."
          }
        },
        "example": {
          "menu_id": 1,
          "quantity": 1
        }
      },
      "CustomerCartsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "WishlistsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Employee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the employee."
          },
          "name": {
            "type": "string",
            "description": "Name of the employee."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the employee."
          },
          "address": {
            "type": "string",
            "description": "Address of the employee."
          }
        },
        "example": {
          "id": 1,
          "name": "Alice Wonderland",
          "email": "alice@cakestore.com",
          "address": "789 Bakery Lane"
        }
      },
      "EmployeesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        }
      },
      "SingleEmployeeResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "UpdateEmployeeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the employee."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Updated email of the employee."
          },
          "address": {
            "type": "string",
            "description": "Updated address of the employee."
          }
        },
        "example": {
          "name": "Bob The Baker",
          "address": "100 Sweet Street"
        }
      },
      "Reservation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the reservation."
          },
          "customer_id": {
            "type": "integer",
            "description": "ID of the customer who made the reservation."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "table_number": {
            "type": "integer",
            "description": "Table number reserved."
          },
          "guest_count": {
            "type": "integer",
            "description": "Number of guests for the reservation."
          },
          "reserve_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the reservation."
          },
          "status": {
            "type": "string",
            "description": "Status of the reservation (e.g., 'pending', 'confirmed', 'cancelled')."
          },
          "special_notes": {
            "type": "string",
            "description": "Any special notes or requests for the reservation."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "customer_id": 1,
          "customer": {
            "id": 1,
            "name": "John Doe",
            "email": "john.doe@example.com",
            "address": "123 Main St, Anytown"
          },
          "table_number": 5,
          "guest_count": 4,
          "reserve_date": "2025-06-20T19:00:00Z",
          "status": "confirmed",
          "special_notes": "Birthday celebration",
          "created_at": "2025-06-12T08:13:00Z",
          "updated_at": "2025-06-12T08:13:14Z"
        }
      },
      "ReservationsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reservation"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "SingleReservationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Reservation"
          }
        }
      },
      "CreateReservationRequest": {
        "type": "object",
        "required": [
          "guest_count",
          "reserve_date"
        ],
        "properties": {
          "guest_count": {
            "type": "integer",
            "description": "Number of guests for the reservation."
          },
          "reserve_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the reservation (ISO 8601 format)."
          },
          "special_notes": {
            "type": "string",
            "description": "Any special notes or requests for the reservation.",
            "nullable": true
          }
        },
        "example": {
          "guest_count": 2,
          "reserve_date": "2025-07-15T18:30:00Z",
          "special_notes": "Window seat preferred"
        }
      },
      "UpdateReservationRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Updated status of the reservation (e.g., 'pending', 'confirmed', 'cancelled')."
          },
          "guest_count": {
            "type": "integer",
            "description": "Updated number of guests for the reservation."
          },
          "reserve_date": {
            "type": "string",
            "format": "date-time",
            "description": "Updated date and time of the reservation (ISO 8601 format)."
          },
          "special_notes": {
            "type": "string",
            "description": "Updated special notes or requests for the reservation.",
            "nullable": true
          }
        },
        "example": {
          "status": "confirmed",
          "guest_count": 3
        }
      },
      "InventoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the inventory item."
          },
          "name": {
            "type": "string",
            "description": "Name of the inventory item."
          },
          "quantity": {
            "type": "integer",
            "description": "Current quantity in stock."
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement (e.g., 'kg', 'g', 'piece')."
          },
          "minimum_stock": {
            "type": "integer",
            "description": "Minimum stock level for this item."
          },
          "reorder_point": {
            "type": "integer",
            "description": "Reorder point for this item (when to reorder)."
          },
          "unit_price": {
            "type": "number",
            "format": "float",
            "description": "Price per unit of the inventory item."
          },
          "last_restock_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last restock."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "name": "Flour",
          "quantity": 50,
          "unit": "kg",
          "minimum_stock": 20,
          "reorder_point": 30,
          "unit_price": 15000,
          "last_restock_date": "2025-06-01T10:00:00Z",
          "created_at": "2025-05-15T09:00:00Z",
          "updated_at": "2025-06-01T10:00:00Z"
        }
      },
      "InventoriesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "SingleInventoryResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/InventoryItem"
          }
        }
      },
      "CreateInventoryRequest": {
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit",
          "minimum_stock",
          "reorder_point",
          "unit_price"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the inventory item."
          },
          "quantity": {
            "type": "integer",
            "description": "Initial quantity in stock."
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement."
          },
          "minimum_stock": {
            "type": "integer",
            "description": "Minimum stock level for this item."
          },
          "reorder_point": {
            "type": "integer",
            "description": "Reorder point for this item."
          },
          "unit_price": {
            "type": "integer",
            "description": "Price per unit of the inventory item."
          }
        },
        "example": {
          "name": "Sugar",
          "quantity": 100,
          "unit": "kg",
          "minimum_stock": 50,
          "reorder_point": 60,
          "unit_price": 10000
        }
      },
      "UpdateInventoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the inventory item."
          },
          "quantity": {
            "type": "integer",
            "description": "Updated quantity in stock."
          },
          "unit": {
            "type": "string",
            "description": "Updated unit of measurement."
          },
          "minimum_stock": {
            "type": "integer",
            "description": "Updated minimum stock level."
          },
          "reorder_point": {
            "type": "integer",
            "description": "Updated reorder point."
          },
          "unit_price": {
            "type": "integer",
            "description": "Updated price per unit."
          }
        },
        "example": {
          "quantity": 75,
          "unit_price": 11000
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the table."
          },
          "table_number": {
            "type": "integer",
            "description": "The unique number assigned to the table."
          },
          "capacity": {
            "type": "integer",
            "description": "Maximum number of guests the table can accommodate."
          },
          "is_available": {
            "type": "boolean",
            "description": "Indicates if the table is currently available for reservation/seating."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "table_number": 1,
          "capacity": 4,
          "is_available": true,
          "created_at": "2025-06-12T12:00:00Z",
          "updated_at": "2025-06-12T12:15:57Z"
        }
      },
      "TablesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "SingleTableResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Table"
          }
        }
      },
      "CreateTableRequest": {
        "type": "object",
        "required": [
          "table_number",
          "capacity"
        ],
        "properties": {
          "table_number": {
            "type": "integer",
            "description": "The unique number for the new table."
          },
          "capacity": {
            "type": "integer",
            "description": "Maximum number of guests the new table can accommodate."
          }
        },
        "example": {
          "table_number": 7,
          "capacity": 6
        }
      },
      "UpdateTableRequest": {
        "type": "object",
        "properties": {
          "table_number": {
            "type": "integer",
            "description": "Updated unique number for the table."
          },
          "capacity": {
            "type": "integer",
            "description": "Updated maximum number of guests the table can accommodate."
          },
          "is_available": {
            "type": "boolean",
            "description": "Updated availability status of the table."
          }
        },
        "example": {
          "capacity": 5,
          "is_available": false
        }
      },
      "UpdateTableAvailabilityRequest": {
        "type": "object",
        "required": [
          "is_available"
        ],
        "properties": {
          "is_available": {
            "type": "boolean",
            "description": "The new availability status of the table."
          }
        },
        "example": {
          "is_available": true
        }
      },
      "PaymentNotificationWebhook": {
        "type": "object",
        "properties": {
          "transaction_time": {
            "type": "string",
            "description": "Time of the transaction.",
            "example": "2025-06-12 23:49:00"
          },
          "transaction_status": {
            "type": "string",
            "description": "Status of the transaction (e.g., 'settlement', 'pending', 'deny', 'expire', 'cancel')."
          },
          "transaction_id": {
            "type": "string",
            "description": "Unique ID of the transaction from the payment gateway."
          },
          "status_message": {
            "type": "string",
            "description": "Descriptive message about the transaction status."
          },
          "status_code": {
            "type": "string",
            "description": "Status code from the payment gateway (e.g., '200', '201', '202')."
          },
          "signature_key": {
            "type": "string",
            "description": "Signature key for webhook verification."
          },
          "payment_type": {
            "type": "string",
            "description": "Type of payment used (e.g., 'credit_card', 'gopay')."
          },
          "order_id": {
            "type": "string",
            "description": "The order ID from your system."
          },
          "metadata": {
            "type": "object",
            "properties": {
              "oms_channel_type": {
                "type": "string"
              }
            },
            "description": "Additional metadata from the payment gateway."
          },
          "merchant_id": {
            "type": "string",
            "description": "Merchant ID associated with the payment."
          },
          "masked_card": {
            "type": "string",
            "description": "Masked credit card number (if applicable)."
          },
          "gross_amount": {
            "type": "string",
            "description": "Gross amount of the transaction.",
            "example": "100000.00"
          },
          "fraud_status": {
            "type": "string",
            "description": "Fraud status of the transaction (e.g., 'accept', 'deny')."
          },
          "expiry_time": {
            "type": "string",
            "description": "Expiry time of the payment.",
            "example": "2025-06-13 23:49:00"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the transaction (e.g., 'IDR')."
          },
          "channel_response_message": {
            "type": "string",
            "description": "Message from the payment channel."
          },
          "channel_response_code": {
            "type": "string",
            "description": "Response code from the payment channel."
          },
          "card_type": {
            "type": "string",
            "description": "Type of card used (if applicable)."
          },
          "bank": {
            "type": "string",
            "description": "Bank used for the payment (if applicable)."
          },
          "approval_code": {
            "type": "string",
            "description": "Approval code for the transaction (if applicable)."
          }
        },
        "example": {
          "transaction_time": "2025-06-12 23:49:00",
          "transaction_status": "settlement",
          "transaction_id": "TRANS-12345",
          "status_message": "Success, transaction is settled",
          "status_code": "200",
          "signature_key": "some_signature_key",
          "payment_type": "credit_card",
          "order_id": "ORDER-001",
          "metadata": {
            "oms_channel_type": "web"
          },
          "merchant_id": "MERCHANT-ABC",
          "masked_card": "481111-xxxx-xxxx-1111",
          "gross_amount": "100000.00",
          "fraud_status": "accept",
          "expiry_time": "2025-06-13 23:49:00",
          "currency": "IDR",
          "channel_response_message": "Approved",
          "channel_response_code": "00",
          "card_type": "credit",
          "bank": "bca",
          "approval_code": "123456"
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer",
            "description": "The current page number."
          },
          "total": {
            "type": "integer",
            "description": "The total number of items available."
          },
          "per_page": {
            "type": "integer",
            "description": "The number of items per page."
          },
          "last_page": {
            "type": "integer",
            "description": "The last page number."
          },
          "has_next_page": {
            "type": "boolean",
            "description": "Indicates if there is a next page."
          },
          "has_prev_page": {
            "type": "boolean",
            "description": "Indicates if there is a previous page."
          }
        },
        "example": {
          "current_page": 1,
          "total": 100,
          "per_page": 10,
          "last_page": 10,
          "has_next_page": true,
          "has_prev_page": false
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
